#!/usr/bin/env python3
"""
Solucionador de conectividad celular - PC
Diagn√≥stico avanzado y soluciones autom√°ticas
"""
import subprocess
import socket
import time
import threading
import webbrowser
import os

def ejecutar_comando(comando):
    """Ejecuta un comando y devuelve el resultado"""
    try:
        result = subprocess.run(comando, shell=True, capture_output=True, text=True)
        return result.stdout, result.stderr, result.returncode
    except Exception as e:
        return "", str(e), 1

def obtener_gateway():
    """Obtiene la IP del gateway/router"""
    stdout, _, _ = ejecutar_comando("ipconfig | findstr 'Puerta de enlace predeterminada'")
    if stdout:
        lines = stdout.split('\n')
        for line in lines:
            if '192.168.' in line:
                parts = line.split(':')
                if len(parts) > 1:
                    ip = parts[1].strip()
                    if ip and ip != '':
                        return ip
    return "192.168.1.1"  # Gateway com√∫n por defecto

def verificar_ping_gateway():
    """Verifica si se puede hacer ping al gateway"""
    gateway = obtener_gateway()
    print(f"üåê Probando conectividad al router ({gateway})...")

    stdout, _, code = ejecutar_comando(f"ping -n 2 {gateway}")
    if code == 0 and "bytes=" in stdout:
        print(f"‚úÖ Conectividad al router OK")
        return True, gateway
    else:
        print(f"‚ùå No se puede conectar al router")
        return False, gateway

def crear_configuracion_router(gateway):
    """Crea un archivo con instrucciones para configurar el router"""
    contenido = f"""
üîß INSTRUCCIONES PARA CONFIGURAR TU ROUTER
============================================

1. ACCEDER AL ROUTER:
   ‚Ä¢ Abre un navegador en tu PC
   ‚Ä¢ Ve a: http://{gateway}
   ‚Ä¢ Usuario com√∫n: admin / Password com√∫n: admin (o ver etiqueta del router)

2. BUSCAR CONFIGURACI√ìN INAL√ÅMBRICA:
   ‚Ä¢ WiFi Settings / Configuraci√≥n WiFi
   ‚Ä¢ Wireless Settings / Ajustes Inal√°mbricos
   ‚Ä¢ Advanced / Avanzado

3. DESACTIVAR AISLAMIENTO:
   Busca y DESACTIVA estas opciones:
   ‚úó AP Isolation (Aislamiento AP)
   ‚úó Client Isolation (Aislamiento de Cliente)
   ‚úó Station Isolation
   ‚úó Wireless Isolation
   ‚úó Device Isolation (Aislamiento de Dispositivos)
   ‚úó Inter-Device Communication (Comunicaci√≥n entre Dispositivos)

4. GUARDAR Y REINICIAR:
   ‚Ä¢ Save / Guardar configuraci√≥n
   ‚Ä¢ Restart / Reiniciar router
   ‚Ä¢ Esperar 2-3 minutos

5. PROBAR CONEXI√ìN:
   ‚Ä¢ Desde tu celular: http://192.168.1.24:8090

ROUTERS COMUNES:
- TP-Link: Advanced ‚Üí Wireless ‚Üí Advanced
- Netgear: WiFi Settings ‚Üí Access Control
- Linksys: WiFi Settings ‚Üí WiFi Access Control
- ASUS: Adaptive QoS ‚Üí Traditional QoS ‚Üí Bandwidth Monitor
- Huawei: WiFi ‚Üí WiFi Security
"""

    with open("configuracion-router.txt", "w", encoding="utf-8") as f:
        f.write(contenido)

    print(f"üìù Instrucciones guardadas en: configuracion-router.txt")
    return "configuracion-router.txt"

def intentar_solucion_windows():
    """Intenta soluciones autom√°ticas en Windows"""
    print("\nüîß INTENTANDO SOLUCIONES AUTOM√ÅTICAS:")
    print("=" * 50)

    # 1. Verificar y configurar perfil de red
    print("1Ô∏è‚É£ Configurando perfil de red como privada...")
    cmd1 = 'powershell -Command "Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory Private"'
    stdout, stderr, code = ejecutar_comando(cmd1)
    if code == 0:
        print("‚úÖ Perfil de red configurado como privada")
    else:
        print("‚ùå Error configurando perfil de red")

    # 2. Habilitar descubrimiento de red
    print("2Ô∏è‚É£ Habilitando descubrimiento de red...")
    cmd2 = 'netsh advfirewall firewall set rule group="Network Discovery" new enable=Yes'
    stdout, stderr, code = ejecutar_comando(cmd2)
    if code == 0:
        print("‚úÖ Descubrimiento de red habilitado")
    else:
        print("‚ùå Error habilitando descubrimiento de red")

    # 3. Habilitar compartir archivos e impresoras
    print("3Ô∏è‚É£ Habilitando compartir archivos...")
    cmd3 = 'netsh advfirewall firewall set rule group="File and Printer Sharing" new enable=Yes'
    stdout, stderr, code = ejecutar_comando(cmd3)
    if code == 0:
        print("‚úÖ Compartir archivos habilitado")
    else:
        print("‚ùå Error habilitando compartir archivos")

    # 4. Verificar regla espec√≠fica del puerto 8090
    print("4Ô∏è‚É£ Verificando regla de firewall puerto 8090...")
    cmd4 = 'netsh advfirewall firewall show rule name="Python 8090" dir=in'
    stdout, stderr, code = ejecutar_comando(cmd4)
    if "Python 8090" in stdout:
        print("‚úÖ Regla de firewall existente")
    else:
        print("üîß Creando regla de firewall...")
        cmd4b = 'netsh advfirewall firewall add rule name="Python 8090" dir=in action=allow protocol=TCP localport=8090'
        ejecutar_comando(cmd4b)
        print("‚úÖ Regla de firewall creada")

def crear_servidor_test():
    """Crea un servidor de prueba simplificado"""
    servidor_content = '''#!/usr/bin/env python3
import http.server
import socketserver
import time

class TestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        client_ip = self.client_address[0]
        print(f"\\nüéâ CONEXI√ìN DESDE: {client_ip}")

        self.send_response(200)
        self.send_header('Content-Type', 'text/html; charset=utf-8')
        self.end_headers()

        html = f"""
        <html><head><meta charset="UTF-8"><title>√âxito</title>
        <style>body{{background:#4CAF50;color:white;text-align:center;padding:50px;font-family:Arial}}</style>
        </head><body>
        <h1>üéâ ¬°FUNCION√ì!</h1>
        <p>Tu celular ({client_ip}) se conect√≥ exitosamente</p>
        <p>Hora: {time.strftime('%H:%M:%S')}</p>
        </body></html>
        """
        self.wfile.write(html.encode())

PORT = 8090
print("üöÄ Servidor de prueba iniciado en puerto", PORT)
print("üì± Desde tu celular: http://192.168.1.24:8090")
with socketserver.TCPServer(("0.0.0.0", PORT), TestHandler) as httpd:
    httpd.serve_forever()
'''

    with open("servidor-test-final.py", "w", encoding="utf-8") as f:
        f.write(servidor_content)
    return "servidor-test-final.py"

def main():
    print("üîß SOLUCIONADOR DE CONECTIVIDAD CELULAR")
    print("=" * 50)

    # 1. Verificar conectividad b√°sica
    print("1Ô∏è‚É£ VERIFICANDO CONECTIVIDAD B√ÅSICA...")
    gateway_ok, gateway = verificar_ping_gateway()

    if not gateway_ok:
        print("‚ùå Problema de conectividad b√°sica con el router")
        print("   Verifica que est√©s conectado a WiFi")
        return

    # 2. Aplicar soluciones autom√°ticas
    intentar_solucion_windows()

    # 3. Crear instrucciones para el router
    print("\nüìù CREANDO INSTRUCCIONES PARA ROUTER...")
    archivo_config = crear_configuracion_router(gateway)

    # 4. Crear servidor de prueba
    print("üñ•Ô∏è  CREANDO SERVIDOR DE PRUEBA...")
    servidor_test = crear_servidor_test()

    print("\n" + "=" * 50)
    print("‚úÖ CONFIGURACI√ìN COMPLETADA")
    print("=" * 50)

    print("\nüìã PR√ìXIMOS PASOS:")
    print("1Ô∏è‚É£ LEE las instrucciones en:", archivo_config)
    print("2Ô∏è‚É£ CONFIGURA tu router seg√∫n las instrucciones")
    print("3Ô∏è‚É£ EJECUTA el servidor de prueba:")
    print(f"   python {servidor_test}")
    print("4Ô∏è‚É£ PRUEBA desde tu celular: http://192.168.1.24:8090")

    print("\nüÜò SI A√öN NO FUNCIONA:")
    print("‚Ä¢ Prueba conectar tu PC al hotspot de tu celular")
    print("‚Ä¢ Verifica que no tengas software antivirus bloqueando")
    print("‚Ä¢ Algunos routers requieren reinicio completo")

    # Abrir archivo de configuraci√≥n
    try:
        os.startfile(archivo_config)
        print(f"\nüìñ Abriendo {archivo_config}...")
    except:
        pass

if __name__ == "__main__":
    main()
