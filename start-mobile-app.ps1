# Script de PowerShell para probar la aplicaci√≥n m√≥vil con el servidor universitario
Write-Host "üì± Probando aplicaci√≥n m√≥vil con servidor universitario..." -ForegroundColor Green

# Variables
$SERVER_URL = "http://146.83.198.35:1609"
$API_CONFIG_FILE = "business-app\lib\api-config.ts"

Write-Host "üîß Verificando configuraci√≥n de la aplicaci√≥n..." -ForegroundColor Yellow

# Verificar que el archivo de configuraci√≥n existe
if (!(Test-Path $API_CONFIG_FILE)) {
    Write-Host "‚ùå Archivo de configuraci√≥n no encontrado: $API_CONFIG_FILE" -ForegroundColor Red
    exit 1
}

# Mostrar configuraci√≥n actual
Write-Host "üìã Configuraci√≥n actual:" -ForegroundColor Blue
Get-Content $API_CONFIG_FILE | Select-String -Pattern "BASE_URL" -Context 3

Write-Host ""
Write-Host "üåê Probando conectividad con el servidor..." -ForegroundColor Yellow

# Probar endpoint health
Write-Host "1. Probando /health..." -ForegroundColor Cyan
try {
    $response = Invoke-RestMethod -Uri "$SERVER_URL/health" -TimeoutSec 10
    Write-Host "‚úÖ Health check exitoso: $response" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Health check fall√≥: $($_.Exception.Message)" -ForegroundColor Red
}

# Probar endpoint inventario
Write-Host "2. Probando /api/inventario..." -ForegroundColor Cyan
try {
    $response = Invoke-RestMethod -Uri "$SERVER_URL/api/inventario" -TimeoutSec 10
    Write-Host "‚úÖ Inventario accesible" -ForegroundColor Green
    Write-Host "Respuesta: $($response | ConvertTo-Json)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Inventario no accesible: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üöÄ Iniciando aplicaci√≥n m√≥vil..." -ForegroundColor Green
Write-Host "Aseg√∫rate de que:" -ForegroundColor Yellow
Write-Host "1. El servidor est√© ejecut√°ndose en 146.83.198.35:1609" -ForegroundColor White
Write-Host "2. Est√©s conectado a la VPN universitaria" -ForegroundColor White
Write-Host "3. El emulador tenga acceso a internet" -ForegroundColor White

# Ir al directorio de la aplicaci√≥n
Set-Location business-app

# Verificar si Node.js est√° instalado
if (!(Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Node.js no est√° instalado. Inst√°lalo desde https://nodejs.org/" -ForegroundColor Red
    exit 1
}

# Instalar dependencias si es necesario
if (!(Test-Path "node_modules")) {
    Write-Host "üì¶ Instalando dependencias..." -ForegroundColor Yellow
    npm install
}

# Iniciar la aplicaci√≥n
Write-Host "üéØ Iniciando aplicaci√≥n Next.js..." -ForegroundColor Green
npm run dev
