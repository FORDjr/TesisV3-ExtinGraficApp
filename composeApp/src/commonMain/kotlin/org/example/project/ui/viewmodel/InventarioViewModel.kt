package org.example.project.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import org.example.project.data.repository.InventarioRepository
import org.example.project.data.model.ProductoRequest
import org.example.project.data.model.ProductoUI

class InventarioViewModel : ViewModel() {

    private val repository = InventarioRepository()

    // Estados del repositorio
    val productos = repository.productos
    val isLoading = repository.isLoading
    val error = repository.error

    // Estado de conexi√≥n
    private val _isConnected = MutableStateFlow<Boolean?>(null)
    val isConnected: StateFlow<Boolean?> = _isConnected.asStateFlow()

    // Estados locales para filtros y b√∫squeda
    private val _searchText = MutableStateFlow("")
    val searchText: StateFlow<String> = _searchText.asStateFlow()

    private val _selectedCategory = MutableStateFlow("Todas")
    val selectedCategory: StateFlow<String> = _selectedCategory.asStateFlow()

    // DATOS DEMO INMEDIATOS - SIEMPRE DISPONIBLES
    private val productosDemo = listOf(
        ProductoUI(
            id = 1,
            nombre = "Extintor PQS 6kg",
            categoria = "Extintores",
            precio = 45000.0,
            stock = 15,
            stockMinimo = 5,
            descripcion = "Extintor de polvo qu√≠mico seco para fuegos ABC",
            fechaIngreso = "2025-01-03"
        ),
        ProductoUI(
            id = 2,
            nombre = "Extintor CO2 5kg",
            categoria = "Extintores",
            precio = 65000.0,
            stock = 8,
            stockMinimo = 3,
            descripcion = "Extintor de di√≥xido de carbono para fuegos BC",
            fechaIngreso = "2025-01-03"
        ),
        ProductoUI(
            id = 3,
            nombre = "Detector de Humo",
            categoria = "Detectores",
            precio = 25000.0,
            stock = 25,
            stockMinimo = 10,
            descripcion = "Detector de humo fotoel√©ctrico",
            fechaIngreso = "2025-01-03"
        ),
        ProductoUI(
            id = 4,
            nombre = "Manguera Contraincendios",
            categoria = "Accesorios",
            precio = 120000.0,
            stock = 5,
            stockMinimo = 2,
            descripcion = "Manguera de 25m para sistemas contraincendios",
            fechaIngreso = "2025-01-03"
        ),
        ProductoUI(
            id = 5,
            nombre = "Se√±al√©tica Salida Emergencia",
            categoria = "Se√±alizaci√≥n",
            precio = 8000.0,
            stock = 50,
            stockMinimo = 20,
            descripcion = "Se√±al luminosa de salida de emergencia",
            fechaIngreso = "2025-01-03"
        ),
        ProductoUI(
            id = 6,
            nombre = "Extintor H2O 9L",
            categoria = "Extintores",
            precio = 35000.0,
            stock = 2,
            stockMinimo = 5,
            descripcion = "Extintor de agua para fuegos tipo A",
            fechaIngreso = "2025-01-03"
        )
    )

    // Override productos para mostrar datos demo SOLO cuando no hay conexi√≥n
    val productosFinales: StateFlow<List<ProductoUI>> = combine(
        productos,
        isConnected
    ) { productosRepo, conexionEstado ->
        when {
            // Si hay conexi√≥n y productos del servidor, usar esos
            conexionEstado == true && productosRepo.isNotEmpty() -> {
                println("‚úÖ Modo ONLINE: Usando ${productosRepo.size} productos del servidor")
                productosRepo
            }
            // Si hay conexi√≥n pero no hay productos a√∫n, mostrar lista vac√≠a (cargando)
            conexionEstado == true && productosRepo.isEmpty() -> {
                println("üîÑ Modo ONLINE: Cargando productos del servidor...")
                emptyList()
            }
            // Si NO hay conexi√≥n, usar datos demo
            conexionEstado == false -> {
                println("üì± Modo OFFLINE: Usando ${productosDemo.size} productos demo")
                productosDemo
            }
            // Estado inicial (null) - mostrar datos demo temporalmente
            else -> {
                println("üîÑ Estado inicial: Usando datos demo mientras se verifica conexi√≥n...")
                productosDemo
            }
        }
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.Eagerly,
        initialValue = emptyList() // Empezar vac√≠o hasta verificar conexi√≥n
    )

    // Productos filtrados basados en b√∫squeda y categor√≠a - AHORA USANDO productosFinales
    val productosFiltrados: StateFlow<List<ProductoUI>> = combine(
        productosFinales, // CAMBIO CLAVE: usar productosFinales en lugar de productos
        searchText,
        selectedCategory
    ) { productos, search, category ->
        productos.filter { producto ->
            val matchesSearch = if (search.isEmpty()) {
                true
            } else {
                producto.nombre.contains(search, ignoreCase = true) ||
                producto.categoria.contains(search, ignoreCase = true)
            }

            val matchesCategory = category == "Todas" || producto.categoria == category

            matchesSearch && matchesCategory
        }
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = productosDemo // IMPORTANTE: Inicializar con datos demo
    )

    // Categor√≠as disponibles
    val categorias: StateFlow<List<String>> = productos.map { productos ->
        listOf("Todas") + productos.map { it.categoria }.distinct().sorted()
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = listOf("Todas")
    )

    // Estad√≠sticas calculadas - AHORA USANDO productosFinales
    val estadisticas: StateFlow<EstadisticasInventario> = productosFinales.map { productos ->
        EstadisticasInventario(
            totalProductos = productos.size,
            productosBajoStock = productos.count { it.esBajoStock },
            productosAgotados = productos.count { it.stock == 0 },
            valorTotal = productos.sumOf { it.precio * it.stock }
        )
    }.stateIn(
        scope = viewModelScope,
        started = SharingStarted.WhileSubscribed(5000),
        initialValue = EstadisticasInventario(
            totalProductos = 6,
            productosBajoStock = 1,
            productosAgotados = 0,
            valorTotal = 303000.0
        )
    )

    init {
        // Cargar datos demo inmediatamente al inicializar, luego intentar servidor
        println("üîÑ Inicializando InventarioViewModel...")
        viewModelScope.launch {
            // Primero cargar datos demo como fallback inmediato
            cargarDatosDemoDirecto()

            // Despu√©s intentar conectar al servidor
            verificarConexion()
        }
    }

    /**
     * Cargar datos demo directamente en el ViewModel
     */
    private fun cargarDatosDemoDirecto() {
        println("üîÑ Cargando datos demo directamente...")
        val fechaHoy = "2025-01-03"

        val productosDemo = listOf(
            ProductoUI(
                id = 1,
                nombre = "Extintor PQS 6kg",
                categoria = "Extintores",
                precio = 45000.0,
                stock = 15,
                stockMinimo = 5,
                descripcion = "Extintor de polvo qu√≠mico seco para fuegos ABC",
                fechaIngreso = fechaHoy
            ),
            ProductoUI(
                id = 2,
                nombre = "Extintor CO2 5kg",
                categoria = "Extintores",
                precio = 65000.0,
                stock = 8,
                stockMinimo = 3,
                descripcion = "Extintor de di√≥xido de carbono para fuegos BC",
                fechaIngreso = fechaHoy
            ),
            ProductoUI(
                id = 3,
                nombre = "Detector de Humo",
                categoria = "Detectores",
                precio = 25000.0,
                stock = 25,
                stockMinimo = 10,
                descripcion = "Detector de humo fotoel√©ctrico",
                fechaIngreso = fechaHoy
            ),
            ProductoUI(
                id = 4,
                nombre = "Manguera Contraincendios",
                categoria = "Accesorios",
                precio = 120000.0,
                stock = 5,
                stockMinimo = 2,
                descripcion = "Manguera de 25m para sistemas contraincendios",
                fechaIngreso = fechaHoy
            ),
            ProductoUI(
                id = 5,
                nombre = "Se√±al√©tica Salida Emergencia",
                categoria = "Se√±alizaci√≥n",
                precio = 8000.0,
                stock = 50,
                stockMinimo = 20,
                descripcion = "Se√±al luminosa de salida de emergencia",
                fechaIngreso = fechaHoy
            ),
            ProductoUI(
                id = 6,
                nombre = "Extintor H2O 9L",
                categoria = "Extintores",
                precio = 35000.0,
                stock = 2,
                stockMinimo = 5,
                descripcion = "Extintor de agua para fuegos tipo A",
                fechaIngreso = fechaHoy
            )
        )

        // Forzar la actualizaci√≥n directa en el repositorio
        repository.setProductosDemo(productosDemo)
        println("‚úÖ Datos demo cargados directamente: ${productosDemo.size} productos")
    }

    /**
     * Verificar conexi√≥n con el servidor
     */
    fun verificarConexion() {
        viewModelScope.launch {
            println("üîç Verificando conexi√≥n con el servidor...")
            _isConnected.value = repository.verificarConexion()
            if (_isConnected.value == true) {
                println("‚úÖ Conexi√≥n establecida, cargando productos...")
                cargarProductos()
            } else {
                println("‚ùå No se pudo conectar al servidor, cargando datos demo...")
                // IMPORTANTE: Aunque no haya conexi√≥n, intentar cargar productos (activar√° modo demo)
                cargarProductos()
            }
        }
    }

    /**
     * Cargar productos desde la API
     */
    fun cargarProductos() {
        viewModelScope.launch {
            repository.cargarProductos()
        }
    }

    /**
     * Actualizar texto de b√∫squeda
     */
    fun updateSearchText(text: String) {
        _searchText.value = text
    }

    /**
     * Actualizar categor√≠a seleccionada
     */
    fun updateSelectedCategory(category: String?) {
        _selectedCategory.value = category ?: "Todas"
    }

    /**
     * Agregar nuevo producto
     */
    fun agregarProducto(producto: ProductoRequest) {
        viewModelScope.launch {
            try {
                println("üì¶ Agregando producto: ${producto.nombre}")
                val exitoso = repository.crearProducto(producto)
                if (exitoso) {
                    println("‚úÖ Producto agregado exitosamente")
                    cargarProductos() // Recargar lista
                } else {
                    println("‚ùå Error al agregar producto")
                }
            } catch (e: Exception) {
                println("‚ùå Error agregando producto: ${e.message}")
            }
        }
    }

    /**
     * Actualizar producto existente
     */
    fun actualizarProducto(id: Int, producto: ProductoRequest) {
        viewModelScope.launch {
            try {
                println("üìù Actualizando producto ID: $id")
                val exitoso = repository.actualizarProducto(id, producto)
                if (exitoso) {
                    println("‚úÖ Producto actualizado exitosamente")
                    cargarProductos() // Recargar lista
                } else {
                    println("‚ùå Error al actualizar producto")
                }
            } catch (e: Exception) {
                println("‚ùå Error actualizando producto: ${e.message}")
            }
        }
    }

    /**
     * Eliminar producto
     */
    fun eliminarProducto(id: Int) {
        viewModelScope.launch {
            try {
                println("üóëÔ∏è Eliminando producto ID: $id")
                val eliminado = repository.eliminarProducto(id)
                if (eliminado) {
                    println("‚úÖ Producto eliminado exitosamente")
                    cargarProductos() // Recargar lista
                } else {
                    println("‚ùå Error al eliminar producto")
                }
            } catch (e: Exception) {
                println("‚ùå Error eliminando producto: ${e.message}")
            }
        }
    }

    /**
     * Limpiar errores
     */
    fun limpiarError() {
        repository.limpiarError()
    }

    override fun onCleared() {
        super.onCleared()
        repository.close()
    }
}

/**
 * Clase para las estad√≠sticas del inventario
 */
data class EstadisticasInventario(
    val totalProductos: Int = 0,
    val productosBajoStock: Int = 0,
    val productosAgotados: Int = 0,
    val valorTotal: Double = 0.0
)
